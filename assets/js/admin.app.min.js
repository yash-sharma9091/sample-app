'use strict';

var mimicTrading = angular.module('mimicTrading', ['ui.router', 'ngAnimate', 'ngMessages', 'ngFileUpload', 'LocalStorageModule', 'ui.router.state.events', 'ui.bootstrap', 'oc.lazyLoad', 'ngSanitize', 'angular-ladda', 'ui.mask', 'textAngular']);
// 'use strict';

// /* Application config */
// /*Angular interceptors are service factories that are registered with the $httpProvider */
// mimicTrading.config(['$httpProvider', function($httpProvider){
// 	var interceptor = ['$q', '$rootScope', 'loginSrv',function ($q, $rootScope, loginSrv) {
//         return {
//         	request: function (config) {
//                 // TRUE (Authorization: Token 205468286028d2d9df99a2f8f7a423220ef44452)
//                 config.headers = config.headers || {};
//                 var token = loginSrv.getToken();

//                 if (token) {
//                     config.headers.Authorization = `Bearer ${token}`;
//                     loginSrv.isLogged = true;
//                 }
// 	           	return config;
// 	       	},

//             requestError: function (rejection) {
//                 return $q.reject(rejection);
//             },

//             response: function (response) {
//                 return response || $q.when(response);
//             },

//             // Revoke client authentication if 400 is received
//             responseError: function (rejection) {

//                 if( 'onLine' in navigator ){
//                     if( !navigator.onLine ){
//                         $rootScope.$broadcast('server_error',{message:'ERR_INTERNET_DISCONNECTED'});
//                         return;    
//                     }
//                 }


//                 if(rejection.status === 401) {
//                     if(rejection.data.errors.code === "invalid_token") {
//                         $rootScope.$broadcast('server_error',{message:'Your Session has been expired, please login again to continue.', status_code: 401});
//                         return;
//                     }
//                 }

//                 if(rejection.status <= 0) {
//                     $rootScope.$broadcast('server_error',{message:'ERR_CONNECTION_REFUSED'});
//                     return;
//                 }
//                 return $q.reject(rejection);
//             }
//         };
//     }];

// 	$httpProvider.interceptors.push(interceptor);
// }])
// .config(['$compileProvider', function ($compileProvider) {
//   $compileProvider.debugInfoEnabled(false);
// }])
// .config(['laddaProvider', function (laddaProvider) {
//     laddaProvider.setOption({
//         style: 'zoom-in',
//     });
// }])
// .config(['$ocLazyLoadProvider', function($ocLazyLoadProvider) {
//     $ocLazyLoadProvider.config({
//         // global configs go here
//     });
// }])
// .config(['$qProvider', function ($qProvider) {
//     $qProvider.errorOnUnhandledRejections(false);
// }])
// // .config(['localStorageServiceProvider', function(localStorageServiceProvider){
// //     var hostname = window.location.hostname;
// //     var prefix;
// //     switch(hostname){
// //         case 'localhost': 
// //         case 'local.mimic.com':
// //         prefix = 'localAdmin';
// //         break;

// //         default:
// //         prefix = 'prodAdmin';
// //     }
// //     localStorageServiceProvider.setPrefix(prefix);
// // }])
// .run(['$location','$rootScope','loginSrv','$state','localStorageService','$timeout','$injector','notificationSvr',
// 	function($location, $rootScope, loginSrv, $state,localStorageService, $timeout, $injector, notificationSvr){

// 		$rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
//             $rootScope.isPageLoading = true; 
//             $rootScope.server_error_message = '';
//             if (toState.authenticate && !loginSrv.isLogged && !localStorageService.get('admin')){
//                 loginSrv.isLogged = false;
//                 $state.go("login");
//                 event.preventDefault(); 
//             }else {
//                 var token = localStorageService.get('token');
//                 if($location.path() === '/' && token ){
//                     $location.path('/dashboard');
//                 }
//             }
// 		});

//         $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
//             $rootScope.isPageLoading = false;
//         });

//         $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
//             if( error.errors ) {
//                 /**
//                  * This will help in resolve 500 state
//                  * without url change
//                  */
//                 let state = $injector.get('$state');
//                 state.go('500');
//                 App.alert({type: ('danger'), icon: ( 'warning'), message: error.message, container: $rootScope.settings.errorContainer, place: 'prepend'});
//                 return $location.path();
//             }
//         });

//         /* This will logout the admin from the application */
//         $rootScope.clearToken = function () {
//             localStorageService.remove('token');
//             localStorageService.remove('admin');
//             delete $rootScope.admin;
//             loginSrv.isLogged = false;
//             $state.go("login");
//         };

//         // Set the admin for entire application
//         $rootScope.admin = localStorageService.get('admin');

//         // If any global error occured
//         $rootScope.$on('server_error', function (event, res) {
//             if(res.status_code){
//                 if(res.status_code === 401){
//                     $rootScope.clearToken();
//                 }
//             }
//             $rootScope.server_error_message = res.message;
//         });

//         $rootScope.manageCount = (data) => {
//             if( data ) {
//                 $rootScope.notificationCount = data.records.count;    
//             } else {
//                 if( $rootScope.notificationCount > 0 ) {
//                     $rootScope.notificationCount -= 1;
//                 }
//             }
//         };

//         $rootScope.goToNotificationUrl = (data) => {
//             notificationSvr.markAsRead([data.id])
//             .then(response => {
//                 $rootScope.manageCount();
//                 $location.path(data.url);
//             })
//             .catch(errors => App.alert({type: ('danger'), icon: ( 'warning'), message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend'}));
//         };
//     }
// ]);
'use strict';
/* Setup App Main Controller */

mimicTrading.controller('AppController', ['$scope', '$rootScope', function ($scope, $rootScope) {
    $scope.$on('$viewContentLoaded', function () {
        App.initComponents(); // init core components
        //Layout.init(); //  Init entire layout(header, footer, sidebar, etc) on page load if the partials included in server side instead of loading with ng-include directive 
    });
}]);

/***
Layout Partials.
By default the partials are loaded through AngularJS ng-include directive. In case they loaded in server side(e.g: PHP include function) then below partial 
initialization can be disabled and Layout.init() should be called on page load complete as explained above.
***/

/* Setup Layout Part - Header */
mimicTrading.controller('HeaderController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initHeader(); // init header
    });
}]);

/* Setup Layout Part - Sidebar */
mimicTrading.controller('SidebarController', ['$state', '$scope', function ($state, $scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initSidebar($state); // init sidebar
    });
}]);

/* Setup Layout Part - Quick Sidebar */
mimicTrading.controller('QuickSidebarController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        setTimeout(function () {
            QuickSidebar.init(); // init quick sidebar        
        }, 2000);
    });
}]);

/* Setup Layout Part - Theme Panel */
mimicTrading.controller('ThemePanelController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Demo.init(); // init theme panel
    });
}]);

/* Setup Layout Part - Footer */
mimicTrading.controller('FooterController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initFooter(); // init footer
    });
}]);

/* Init global settings and run the app */
mimicTrading.run(["$rootScope", "settings", "$state", function ($rootScope, settings, $state) {
    $rootScope.$state = $state; // state to be accessed from view
    $rootScope.$settings = settings; // state to be accessed from view
}]);
'use strict';

/* Application routes */

mimicTrading.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
	// the known route
	$urlRouterProvider.when('', '/');

	// For any unmatched url, send to 404
	//$urlRouterProvider.otherwise('/404');
	$urlRouterProvider.otherwise(function ($injector, $location) {
		var state = $injector.get('$state');
		state.go('404');
		return $location.path();
	});

	$stateProvider
	// .state('login',{
	// 	url: '/',
	// 	controller: 'loginCtrl',
	// 	templateUrl: '/login/views/login.html',
	// 	authenticate: false,
	// 	data: {pageTitle: 'Login'},
	// 	resolve: {
	// 	    deps: ['$ocLazyLoad', function($ocLazyLoad) {
	// 	        return $ocLazyLoad.load({
	// 	            name: 'mimicTrading',
	// 	            insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
	// 	            files: [
	// 	                '/assets/css/admin-login-style.css'
	// 	            ] 
	// 	        });
	// 	    }]
	// 	},
	// })
	.state('dashboard', {
		url: '/',
		controller: 'DashboardController',
		templateUrl: '/dashboard/views/dashboard.html',
		data: { pageTitle: 'Dashboard', smallTitle: 'dashboard & statistics' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/morris/morris.css', '/assets/global/plugins/morris/morris.min.js', '/assets/global/plugins/morris/raphael-min.js', '/assets/global/plugins/jquery.sparkline.min.js', '/assets/pages/scripts/dashboard.min.js']
				});
			}]
		},
		authenticate: false
	}).state('404', {
		templateUrl: '/tpl/404.html',
		data: { pageTitle: '404 Page Not Found' },
		authenticate: false,
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before',
					files: ['/assets/pages/css/error.min.css']
				});
			}]
		}
	}).state('500', {
		templateUrl: '/tpl/500.html',
		data: { pageTitle: '500 Internal Server Error' },
		authenticate: false,
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before',
					files: ['/assets/pages/css/error.min.css']
				});
			}]
		}
	}).state('resetpassword', {
		url: '/resetpassword/:key',
		templateUrl: '/resetpassword/views/resetpassword.html',
		data: { pageTitle: 'Reset Password' },
		authenticate: false,
		controller: 'resetPasswordCtrl',
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/css/admin-login-style.css']
				});
			}]
		}
	});
}]);
/***
GLobal Directives
***/

// Route State Load Spinner(used on page or content load)
mimicTrading.directive('ngSpinnerBar', ['$rootScope', '$state', function ($rootScope, $state) {
    return {
        link: function (scope, element, attrs) {
            // by defult hide the spinner bar
            element.addClass('hide'); // hide spinner bar by default

            // display the spinner bar whenever the route changes(the content part started loading)
            $rootScope.$on('$stateChangeStart', function () {
                element.removeClass('hide'); // show spinner bar
            });

            // hide the spinner bar on rounte change success(after the content loaded)
            $rootScope.$on('$stateChangeSuccess', function (event) {
                element.addClass('hide'); // hide spinner bar

                $('body').removeClass('page-on-load'); // remove page loading indicator
                Layout.setAngularJsSidebarMenuActiveLink('match', null, event.currentScope.$state); // activate selected link in the sidebar menu

                // auto scorll to page top
                setTimeout(function () {
                    App.scrollTop(); // scroll to the top on content load
                }, $rootScope.settings.layout.pageAutoScrollOnLoad);
            });

            // handle errors
            $rootScope.$on('$stateNotFound', function () {
                element.addClass('hide'); // hide spinner bar
            });

            // handle errors
            $rootScope.$on('$stateChangeError', function () {
                element.addClass('hide'); // hide spinner bar
            });
        }
    };
}]);

// Handle global LINK click
mimicTrading.directive('a', function () {
    return {
        restrict: 'E',
        link: function (scope, elem, attrs) {
            if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                elem.on('click', function (e) {
                    e.preventDefault(); // prevent link click for above criteria
                });
            }
        }
    };
});

// Handle Dropdown Hover Plugin Integration
mimicTrading.directive('dropdownMenuHover', function () {
    return {
        link: function (scope, elem) {
            elem.dropdownHover();
        }
    };
});
angular.module('mimicTrading').controller('DashboardController', function ($rootScope, $scope, $http, $timeout) {
    $scope.$on('$viewContentLoaded', function () {
        // initialize core components
        App.initAjax();
    });

    // set sidebar closed and body solid layout mode
    $rootScope.settings.layout.pageContentWhite = true;
    $rootScope.settings.layout.pageBodySolid = false;
    $rootScope.settings.layout.pageSidebarClosed = false;
});
'use strict';

mimicTrading.controller('loginCtrl', ['$scope', '$rootScope', '$state', '$http', 'loginSrv', ($scope, $rootScope, $state, $http, loginSrv) => {

	/**
  * login function will authenticate user 
  * and redirect to specific dashboard
  * @param  {Boolean} isValid [Check if form is valid]
  * @return {none}   [User will redirect to dashboard]
  */
	// 	$scope.login = (isValid) => {
	// 		if( !isValid ){
	// 			return;
	// 		}
	// 		$scope.isLoading = true;
	// 		RestSvr.login('login', $scope.user)
	// 		.then(response => {
	// 			/* loginSrv will initialize user session
	// 			 * and store user data into localStorage
	// 			 * $rootScope.admin assign a globle variable
	// 			 */
	// 			loginSrv.initAdminSession(response.user, response.token);
	// 			$state.go('dashboard');	
	// 		})
	// 		.catch(errors => {
	// 			$scope.message = errors.message;
	// 		})
	// 		.then(() => {
	// 			$scope.isLoading = false;
	// 		});
	// 	};

	//    $scope.forgotpassword = () => {
	//    	    $scope.isLoading = true;
	//    	     let inputjson={email:$scope.email};
	// 		$http.post('adminapi/forgotpassword', inputjson)
	// 		.then(response => {
	// 			App.alert({type: ('success'), icon: ( 'success'), message: response.data.message, container: $rootScope.settings.errorContainer, place: 'prepend', closeInSeconds: 5});
	// 			$state.go('login');	
	// 		})
	// 		.catch(({data}) => {
	// 			const {responsedata} = data;
	// 			App.alert({type: ('danger'), icon: ( 'warning'), message: responsedata.message, container: $rootScope.settings.errorContainer, place: 'prepend', closeInSeconds: 5});
	// 		})
	// 		.then(() => {
	// 			$scope.isLoading = false;
	// 		});
	//   };
}]);
'use strict';

mimicTrading.factory('loginSrv', ['localStorageService', '$rootScope', function (localStorageService, $rootScope) {
    // Don't use arrow function here because it will change the "this" to undefined
    return {
        isLogged: false,
        initAdminSession: function (admin, token) {
            // Don't use arrow function here because it will change the "this" to undefined
            this.isLogged = true;
            localStorageService.set('token', token);
            localStorageService.set('admin', admin);
            $rootScope.admin = localStorageService.get('admin');
        },
        updateAdminSession: function (admin, token) {
            // Don't use arrow function here because it will change the "this" to undefined

            localStorageService.set('admin', admin);

            $rootScope.admin = localStorageService.get('admin');
        },
        getToken: () => localStorageService.get('token')
    };
}]);
// 'use strict';

// mimicTrading.factory('RestSvr',['$http', '$window', '$httpParamSerializerJQLike','$q',
// ($http, $window, $httpParamSerializerJQLike, $q) => {
//     return{
//         login:
//     }
// }
// ])
/* Setup global settings */
mimicTrading.factory('settings', ['$rootScope', function ($rootScope) {
    // supported languages
    var settings = {
        layout: {
            pageSidebarClosed: false, // sidebar menu state
            pageContentWhite: true, // set page content layout
            pageBodySolid: false, // solid body color state
            pageAutoScrollOnLoad: 1000 // auto scroll to top on page load
        },
        assetsPath: '../assets',
        globalPath: '../assets/global',
        layoutPath: '../assets/layouts/layout'
    };

    $rootScope.settings = settings;

    return settings;
}]);
//# sourceMappingURL=../maps/admin.app.min.js.map
