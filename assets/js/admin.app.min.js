'use strict';

var myapp = angular.module('myapp', ['ui.router', 'ngAnimate', 'ngMessages', 'ngFileUpload', 'LocalStorageModule', 'ui.router.state.events', 'ui.bootstrap', 'oc.lazyLoad', 'ngSanitize', 'angular-ladda', 'ui.mask', 'textAngular']);

// mimicTrading
'use strict';

myapp.config(['$httpProvider', function ($httpProvider) {
    var interceptor = ['$rootScope', 'loginSrv', function ($rootScope, loginSrv) {
        return {
            request: function (config) {
                var token = loginSrv.getToken();
                if (token) {
                    config.headers['Authorization'] = "Bearer " + token;
                }
                return config;
            }
        };
    }];
    $httpProvider.interceptors.push(interceptor);
}]).config(['$ocLazyLoadProvider', function ($ocLazyLoadProvider) {
    $ocLazyLoadProvider.config({
        // global configs go here
    });
}]).config(['localStorageServiceProvider', function (localStorageServiceProvider) {
    var prefix = 'localAdmin';
    localStorageServiceProvider.setPrefix('localAdmin');
}]).run(['$location', '$rootScope', 'loginSrv', '$state', 'localStorageService', function ($location, $rootScope, loginSrv, $state, localStorageService) {

    $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        if (toState.authenticate && !localStorageService.get('admin')) {
            $state.go("login");
            event.preventDefault();
        } else {
            var token = localStorageService.get('token');
            if ($location.path() === '/' && token) {
                $location.path('/dashboard');
            }
        }
    });

    /* This will logout the admin from the application */

    $rootScope.clearToken = function () {
        localStorageService.remove('token');
        localStorageService.remove('admin');
        delete $rootScope.admin;
        $state.go("login");
    };

    // Set the admin for entire application
    $rootScope.token = localStorageService.get('token');
    if ($rootScope.token) {
        console.log('in token');
    } else {
        console.log('without token');
    }
    $rootScope.admin = localStorageService.get('admin');
}]);
'use strict';
/* Setup App Main Controller */

myapp.controller('AppController', ['$scope', '$rootScope', function ($scope, $rootScope) {
    $scope.$on('$viewContentLoaded', function () {
        App.initComponents(); // init core components
        //Layout.init(); //  Init entire layout(header, footer, sidebar, etc) on page load if the partials included in server side instead of loading with ng-include directive 
    });
}]);

/***
Layout Partials.
By default the partials are loaded through AngularJS ng-include directive. In case they loaded in server side(e.g: PHP include function) then below partial 
initialization can be disabled and Layout.init() should be called on page load complete as explained above.
***/

/* Setup Layout Part - Header */
myapp.controller('HeaderController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initHeader(); // init header
    });
}]);

/* Setup Layout Part - Sidebar */
myapp.controller('SidebarController', ['$state', '$scope', function ($state, $scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initSidebar($state); // init sidebar
    });
}]);

/* Setup Layout Part - Quick Sidebar */
myapp.controller('QuickSidebarController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        setTimeout(function () {
            QuickSidebar.init(); // init quick sidebar        
        }, 2000);
    });
}]);

/* Setup Layout Part - Theme Panel */
myapp.controller('ThemePanelController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Demo.init(); // init theme panel
    });
}]);

/* Setup Layout Part - Footer */
myapp.controller('FooterController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initFooter(); // init footer
    });
}]);

/* Init global settings and run the app */
myapp.run(["$rootScope", "settings", "$state", function ($rootScope, settings, $state) {
    $rootScope.$state = $state; // state to be accessed from view
    $rootScope.$settings = settings; // state to be accessed from view
}]);
'use strict';

/* Application routes */

myapp.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
	// the known route
	$urlRouterProvider.when('', '/');

	// For any unmatched url, send to 404
	//$urlRouterProvider.otherwise('/404');


	$stateProvider.state('login', {
		url: '/',
		controller: 'loginCtrl',
		templateUrl: '/login/views/login.html',
		authenticate: false,
		data: { pageTitle: 'Login' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/css/admin-login-style.css']
				});
			}]
		}
	}).state('dashboard', {
		url: '/dashboard',
		controller: 'DashboardController',
		templateUrl: '/dashboard/views/dashboard.html',
		data: { pageTitle: 'Dashboard', smallTitle: 'dashboard & statistics' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/morris/morris.css', '/assets/global/plugins/morris/morris.min.js', '/assets/global/plugins/morris/raphael-min.js', '/assets/global/plugins/jquery.sparkline.min.js', '/assets/pages/scripts/dashboard.min.js']
				});
			}]
		},
		authenticate: true
	}).state('404', {
		templateUrl: '/tpl/404.html',
		data: { pageTitle: '404 Page Not Found' },
		authenticate: false,
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before',
					files: ['/assets/pages/css/error.min.css']
				});
			}]
		}
	}).state('500', {
		templateUrl: '/tpl/500.html',
		data: { pageTitle: '500 Internal Server Error' },
		authenticate: false,
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before',
					files: ['/assets/pages/css/error.min.css']
				});
			}]
		}
	}).state('resetpassword', {
		url: '/resetpassword/:key',
		templateUrl: '/resetpassword/views/resetpassword.html',
		data: { pageTitle: 'Reset Password' },
		authenticate: false,
		controller: 'resetPasswordCtrl',
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/css/admin-login-style.css']
				});
			}]
		}
	});
}]);
/***
GLobal Directives
***/

// Route State Load Spinner(used on page or content load)
myapp.directive('ngSpinnerBar', ['$rootScope', '$state', function ($rootScope, $state) {
    return {
        link: function (scope, element, attrs) {
            // by defult hide the spinner bar
            element.addClass('hide'); // hide spinner bar by default

            // display the spinner bar whenever the route changes(the content part started loading)
            $rootScope.$on('$stateChangeStart', function () {
                element.removeClass('hide'); // show spinner bar
            });

            // hide the spinner bar on rounte change success(after the content loaded)
            $rootScope.$on('$stateChangeSuccess', function (event) {
                element.addClass('hide'); // hide spinner bar

                $('body').removeClass('page-on-load'); // remove page loading indicator
                Layout.setAngularJsSidebarMenuActiveLink('match', null, event.currentScope.$state); // activate selected link in the sidebar menu

                // auto scorll to page top
                setTimeout(function () {
                    App.scrollTop(); // scroll to the top on content load
                }, $rootScope.settings.layout.pageAutoScrollOnLoad);
            });

            // handle errors
            $rootScope.$on('$stateNotFound', function () {
                element.addClass('hide'); // hide spinner bar
            });

            // handle errors
            $rootScope.$on('$stateChangeError', function () {
                element.addClass('hide'); // hide spinner bar
            });
        }
    };
}]);

// Handle global LINK click
myapp.directive('a', function () {
    return {
        restrict: 'E',
        link: function (scope, elem, attrs) {
            if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                elem.on('click', function (e) {
                    e.preventDefault(); // prevent link click for above criteria
                });
            }
        }
    };
});

// Handle Dropdown Hover Plugin Integration
myapp.directive('dropdownMenuHover', function () {
    return {
        link: function (scope, elem) {
            elem.dropdownHover();
        }
    };
});
angular.module('myapp').controller('DashboardController', function ($rootScope, $scope, $http, $timeout) {

    $scope.$on('$viewContentLoaded', function () {
        // initialize core components
        App.initAjax();
    });

    // set sidebar closed and body solid layout mode
    $rootScope.settings.layout.pageContentWhite = true;
    $rootScope.settings.layout.pageBodySolid = false;
    $rootScope.settings.layout.pageSidebarClosed = false;
});
'use strict';

myapp.controller('loginCtrl', ["$scope", '$rootScope', '$state', 'loginSrv', 'RestSvr', function ($scope, $rootScope, $state, loginSrv, RestSvr) {

	console.log("loginctrl", $scope.user);
	$scope.submitForm = function () {
		RestSvr.login('login', $scope.user).then(response => {
			console.log(response);
			loginSrv.setAdmin(response.user, response.token);
			$state.go('dashboard');
		}).catch(errors => {
			$scope.message = errors.message;
		});
	};
}]);
'use strict';

myapp.controller('userCtrl', ['$scope', '$state', '$rootScope', 'Upload', 'appSvr', 'RestSvr', function ($scope, $state, $rootScope, Upload, appSvr, RestSvr) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();

		/**
   * only Intialize datatable if current state is users
   * @param  {String} $state.current.name [current state name]
   */

		// Intialize datatable
		TableAjax.init({
			url: 'view-user',
			columns: [{ "data": "id", "orderable": false }, { "data": "username" }, { "data": "mobile" }, { "data": "email" }, { "data": "status" }, { "data": "action" }]
		});
	});

	$scope.formSubmit = function () {
		console.log($scope.new_user);
		RestSvr.post('add-user', $scope.new_user).then(function (response) {
			$state.go('users');
		}).catch(function (error) {
			console.log(error);
		}).finally(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

myapp.controller('userEditCtrl', ['$state', 'RestSvr', '$scope', 'appSvr', 'user', function ($state, RestSvr, $scope, appSvr, user) {
    $scope.$on('$viewContentLoaded', function () {
        /**
         * Initialize the jquery components when view contents loaded properly
         */
        appSvr.init();
    });

    $scope.new_user = user.record.data;
    let id = $state.params.id;
    $scope.formSubmit = function () {
        RestSvr.put(`edit-user/${id}`, $scope.new_user).then(response => {
            $state.go('users');
        }).catch(error => {
            console.log(error);
        });
    };
}]);
'use strict';

myapp.controller('userViewCtrl', ['$scope', 'RestSvr', '$state', 'userSvr', 'user', function ($scope, RestSvr, $state, userSvr, user) {
    console.log("inside view controller");
    let id = $state.params.id;
    $scope.user_info = user.record.data; //get data by resolver
    $scope.goBack = () => {
        $state.go('users');
    };

    $scope.goToEdit = () => {
        $state.go('edit_User', { id: id });
    };
}]);
var TableAjax = function () {

    var handleRecords = function (options) {

        var grid = new Datatable();

        grid.init({
            src: $("#datatable_ajax"),
            onSuccess: function (response) {
                // execute some code after table records loaded
                setTimeout(function () {
                    $('.tooltips').tooltip();
                }, 1000);
            },
            onError: function (grid, err) {
                // execute some code on network or other general error  
            },
            loadingMessage: 'Loading...',
            dataTable: { // here you can define a typical datatable settings from http://datatables.net/usage/options 

                // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/scripts/datatable.js). 
                // So when dropdowns used the scrollable div should be removed. 
                // "dom": "<'row'<'col-md-7 col-sm-12'pli><'col-md-5 col-sm-12'<'table-group-actions pull-right'>>r>t<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>>",
                "dom": "<'row'<'col-md-7 col-sm-12'><'col-md-5 col-sm-12'<'table-group-actions pull-right'>>r><'table-responsive't><'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>>", // datatable layout

                "bStateSave": true, // save datatable state(pagination, sort, etc) in cookie.
                "lengthMenu": [[10, 20, 50, 100, 150, 200], [10, 20, 50, 100, 150, 200] // change per page values here
                ],
                "pageLength": 10, // default record count per page
                "ajax": {
                    "url": baseUrl(options.url), // ajax source
                    "headers": {
                        "Authorization": "Bearer " + JSON.parse(prefix('token'))
                    },
                    "error": function (err) {

                        var message = "Could not complete request. Please check your internet connection";
                        App.unblockUI(grid.gettableContainer());
                        if (err.status === 401) {
                            if (err.responseJSON.errors.code === "invalid_token") {
                                var $body = angular.element(document.body);
                                var $rootScope = $body.injector().get('$rootScope');
                                message = "Your Session has been expired, please login again to continue.";
                                setTimeout(function () {
                                    $rootScope.clearToken();
                                }, 1500);
                            }
                        }

                        App.alert({
                            type: 'danger',
                            icon: 'warning',
                            message: message,
                            container: grid.getTableWrapper(),
                            place: 'prepend'
                        });
                    }
                },
                "columns": options.columns
                // "order": [
                //     [1, "asc"]
                // ] // set first column as a default sort by asc
            }
        });
    };

    return {

        //main function to initiate the module
        init: function (options) {
            handleRecords(options);
        }

    };
}();
'use strict';

myapp.config(['$stateProvider', function ($stateProvider) {

	let userResolver = {
		user: ['userSvr', '$stateParams', (userSvr, $stateParams) => userSvr.getUser($stateParams.id)]
	};
	$stateProvider.state('users', {
		url: '/users',
		controller: 'userCtrl',
		templateUrl: '/users/views/userListing.html',
		data: { pageTitle: 'User Listing' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/datatables/datatables.min.css', '/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.css', '/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css', '/assets/global/plugins/datatables/datatables.all.min.js', '/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js', '/assets/global/scripts/datatable.min.js']
				});
			}]
		},
		authenticate: true
	}).state('new_User', {
		url: '/new-user',
		controller: 'userCtrl',
		templateUrl: '/users/views/new_user.html',
		data: { pageTitle: 'Add New User' },
		authenticate: true
	}).state('view_User', {
		url: '/view-user/:id',
		controller: 'userViewCtrl',
		templateUrl: '/users/views/view_user.html',
		data: { pageTitle: 'User Detail' },
		authenticate: true,
		resolve: userResolver
	}).state('edit_User', {
		url: '/edit-user/:id',
		controller: 'userEditCtrl',
		templateUrl: '/users/views/edit_user.html',
		data: { pageTitle: 'User Detail' },
		authenticate: true,
		resolve: userResolver
	});
}]);
'use strict';

/*this login Srvice will be calles in login controller */

myapp.factory('loginSrv', ['localStorageService', '$rootScope', function (localStorageService, $rootScope) {
	return {
		setAdmin: function (admin, token) {
			localStorageService.set('admin', admin);
			localStorageService.set('token', token);
		},
		updateAdminSession: function (admin, token) {
			$rootScope.admin = localStorageService.get('admin');
		},
		getToken: function () {
			return localStorageService.get('token');
		}
	};
}]);
'use strict';

myapp.factory('userSvr', ['RestSvr', RestSvr => {
    return {
        getUser: id => RestSvr.get(`get-user/${id}`)

    };
}]);
'use strict';

myapp.factory('appSvr', ['$rootScope', $rootScope => {
	return {
		init: () => {
			// initialize core components
			App.initAjax();
			// set default layout mode
			$rootScope.settings.layout.pageContentWhite = true;
			$rootScope.settings.layout.pageBodySolid = false;
			$rootScope.settings.layout.pageSidebarClosed = false;
		}
	};
}]);
'use strict';
/*
to call all http methods*/

myapp.factory('RestSvr', function ($http, $window, $httpParamSerializerJQLike, $q) {
    return {
        login: (url, data) => {
            var req = {
                method: 'POST',
                url: baseUrl(url),
                data: data
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve({
                        result: response.data.message,
                        user: response.data.data,
                        token: response.data.token
                    });
                }).catch(function (response) {
                    console.log(response);
                    reject({
                        errors: true,
                        message: response.data.message || 'Internal Server Error'
                    });
                });
            });
        },
        get: (url, params) => {
            let p = !angular.isUndefined(params) ? params : null;
            var req = {
                method: 'GET',
                url: baseUrl(url),
                params: p
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve({
                        record: response.data
                    });
                }).catch(function (response) {
                    reject({
                        errors: true,
                        message: response.data.message || 'Internal Server Error'
                    });
                });
            });
        },
        post: (url, data) => {
            var req = {
                method: 'POST',
                url: baseUrl(url),
                data: data
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve({
                        result: response.data.message,
                        user: response.data.data,
                        records: response.data.result
                    });
                }).catch(function (response) {
                    reject({
                        message: response.data.message || 'Internal Server Error',
                        status: response.data.status
                    });
                });
            });
        },
        delete: (url, params) => {
            let p = !angular.isUndefined(params) ? params : null;
            var req = {
                method: 'DELETE',
                url: baseUrl(url),
                params: p
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve({
                        record: response.data
                    });
                }).catch(function (response) {
                    reject({
                        errors: true,
                        message: response.data.message || 'Internal Server Error'
                    });
                });
            });
        },
        put: (url, data) => {
            var req = {
                method: 'PUT',
                url: baseUrl(url),
                data: data
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve(response);
                }).catch(function (response) {
                    reject(response);
                });
            });
        }

    };
});

function baseUrl(apiUrl) {
    return '/admin_api/' + apiUrl;
}

function prefix(item) {
    var hostname = window.location.hostname;
    var prefix = 'localAdmin';
    return localStorage.getItem(prefix + '.' + item);
}
/* Setup global settings */
myapp.factory('settings', ['$rootScope', function ($rootScope) {
    // supported languages
    var settings = {
        layout: {
            pageSidebarClosed: false, // sidebar menu state
            pageContentWhite: true, // set page content layout
            pageBodySolid: false, // solid body color state
            pageAutoScrollOnLoad: 1000 // auto scroll to top on page load

        },
        assetsPath: '../assets',
        globalPath: '../assets/global',
        layoutPath: '../assets/layouts/layout'
    };

    $rootScope.settings = settings;
    return settings;
}]);

/**emptybj h */
myapp.factory('notificationSvr', [function () {
    var notification = {};
    notification.markAsRead = function (data) {
        console.log(data);
    };
    return notification;
}]);
//# sourceMappingURL=../maps/admin.app.min.js.map
