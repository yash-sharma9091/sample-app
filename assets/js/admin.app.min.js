'use strict';

<<<<<<< HEAD
var myapp = angular.module('myapp', ['ui.router', 'ngAnimate', 'ngMessages', 'ngFileUpload', 'LocalStorageModule', 'ui.router.state.events', 'ui.bootstrap', 'oc.lazyLoad', 'ngSanitize', 'angular-ladda', 'ui.mask', 'textAngular']);

// mimicTrading
'use strict';

myapp.config(['$httpProvider', function ($httpProvider) {
    var interceptor = ['$rootScope', 'loginSrv', function ($rootScope, loginSrv) {
        return {
            request: function (config) {
                var token = loginSrv.getToken();
                if (token) {
                    config.headers['Authorization'] = "Bearer " + token;
                }
                return config;
            }
        };
    }];
    $httpProvider.interceptors.push(interceptor);
=======
var mimicTrading = angular.module('mimicTrading', ['ui.router', 'ngAnimate', 'ngMessages', 'ngFileUpload', 'LocalStorageModule', 'ui.router.state.events', 'ui.bootstrap', 'oc.lazyLoad', 'ngSanitize', 'angular-ladda', 'ui.mask', 'textAngular']);
'use strict';

/* Application config */
/*Angular interceptors are service factories that are registered with the $httpProvider */

mimicTrading.config(['$httpProvider', function ($httpProvider) {
    var interceptor = ['$q', '$rootScope', 'loginSrv', function ($q, $rootScope, loginSrv) {
        return {
            request: function (config) {
                // TRUE (Authorization: Token 205468286028d2d9df99a2f8f7a423220ef44452)
                config.headers = config.headers || {};
                var token = loginSrv.getToken();

                if (token) {
                    config.headers.Authorization = `Bearer ${token}`;
                    loginSrv.isLogged = true;
                }
                return config;
            },

            requestError: function (rejection) {
                return $q.reject(rejection);
            },

            response: function (response) {
                return response || $q.when(response);
            },

            // Revoke client authentication if 400 is received
            responseError: function (rejection) {

                if ('onLine' in navigator) {
                    if (!navigator.onLine) {
                        $rootScope.$broadcast('server_error', { message: 'ERR_INTERNET_DISCONNECTED' });
                        return;
                    }
                }

                if (rejection.status === 401) {
                    if (rejection.data.errors.code === "invalid_token") {
                        $rootScope.$broadcast('server_error', { message: 'Your Session has been expired, please login again to continue.', status_code: 401 });
                        return;
                    }
                }

                if (rejection.status <= 0) {
                    $rootScope.$broadcast('server_error', { message: 'ERR_CONNECTION_REFUSED' });
                    return;
                }
                return $q.reject(rejection);
            }
        };
    }];

    $httpProvider.interceptors.push(interceptor);
}]).config(['$compileProvider', function ($compileProvider) {
    $compileProvider.debugInfoEnabled(false);
}]).config(['laddaProvider', function (laddaProvider) {
    laddaProvider.setOption({
        style: 'zoom-in'
    });
>>>>>>> c7eae3b548a8da2c7a76ae39d151a9f95518a98d
}]).config(['$ocLazyLoadProvider', function ($ocLazyLoadProvider) {
    $ocLazyLoadProvider.config({
        // global configs go here
    });
<<<<<<< HEAD
}]).config(['localStorageServiceProvider', function (localStorageServiceProvider) {
    localStorageServiceProvider.setPrefix('localAdmin');
}]).run(['$location', '$rootScope', 'loginSrv', '$state', 'localStorageService', function ($location, $rootScope, loginSrv, $state, localStorageService) {

    $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        if (toState.authenticate && !localStorageService.get('admin')) {
=======
}]).config(['$qProvider', function ($qProvider) {
    $qProvider.errorOnUnhandledRejections(false);
}]).config(['localStorageServiceProvider', function (localStorageServiceProvider) {
    var hostname = window.location.hostname;
    var prefix;
    switch (hostname) {
        case 'localhost':
        case 'local.mimic.com':
            prefix = 'localAdmin';
            break;

        default:
            prefix = 'prodAdmin';
    }
    localStorageServiceProvider.setPrefix(prefix);
}]).run(['$location', '$rootScope', 'loginSrv', '$state', 'localStorageService', '$timeout', '$injector', 'notificationSvr', function ($location, $rootScope, loginSrv, $state, localStorageService, $timeout, $injector, notificationSvr) {

    $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        $rootScope.isPageLoading = true;

        /* Application config */
        /*Angular interceptors are service factories that are registered with the $httpProvider */
        mimicTrading.config(['$httpProvider', function ($httpProvider) {
            var interceptor = ['$q', '$rootScope', 'loginSrv', function ($q, $rootScope, loginSrv) {
                return {
                    request: function (config) {
                        // TRUE (Authorization: Token 205468286028d2d9df99a2f8f7a423220ef44452)
                        config.headers = config.headers || {};
                        var token = loginSrv.getToken();

                        if (token) {
                            config.headers.Authorization = `Bearer ${token}`;
                            loginSrv.isLogged = true;
                        }
                        return config;
                    },

                    requestError: function (rejection) {
                        return $q.reject(rejection);
                    },

                    response: function (response) {
                        return response || $q.when(response);
                    },

                    // Revoke client authentication if 400 is received
                    responseError: function (rejection) {

                        if ('onLine' in navigator) {
                            if (!navigator.onLine) {
                                $rootScope.$broadcast('server_error', { message: 'ERR_INTERNET_DISCONNECTED' });
                                return;
                            }
                        }

                        if (rejection.status === 401) {
                            if (rejection.data.errors.code === "invalid_token") {
                                $rootScope.$broadcast('server_error', { message: 'Your Session has been expired, please login again to continue.', status_code: 401 });
                                return;
                            }
                        }

                        if (rejection.status <= 0) {
                            $rootScope.$broadcast('server_error', { message: 'ERR_CONNECTION_REFUSED' });
                            return;
                        }
                        return $q.reject(rejection);
                    }
                };
            }];

            $httpProvider.interceptors.push(interceptor);
        }]).config(['$compileProvider', function ($compileProvider) {
            $compileProvider.debugInfoEnabled(false);
        }]).config(['laddaProvider', function (laddaProvider) {
            laddaProvider.setOption({
                style: 'zoom-in'
            });
        }]).config(['$ocLazyLoadProvider', function ($ocLazyLoadProvider) {
            $ocLazyLoadProvider.config({
                // global configs go here
            });
        }]).config(['$qProvider', function ($qProvider) {
            $qProvider.errorOnUnhandledRejections(false);
        }]).config(['localStorageServiceProvider', function (localStorageServiceProvider) {
            var hostname = window.location.hostname;
            var prefix;
            switch (hostname) {
                case 'localhost':
                case 'local.mimic.com':
                    prefix = 'localAdmin';
                    break;

                default:
                    prefix = 'prodAdmin';
            }
            localStorageServiceProvider.setPrefix(prefix);
        }]).run(['$location', '$rootScope', 'loginSrv', '$state', 'localStorageService', '$timeout', '$injector', 'notificationSvr', function ($location, $rootScope, loginSrv, $state, localStorageService, $timeout, $injector, notificationSvr) {

            $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
                $rootScope.isPageLoading = true;
                $rootScope.server_error_message = '';
                if (toState.authenticate && !loginSrv.isLogged && !localStorageService.get('admin')) {
                    loginSrv.isLogged = false;
                    $state.go("login");
                    event.preventDefault();
                } else {
                    var token = localStorageService.get('token');
                    if ($location.path() === '/' && token) {
                        $location.path('/dashboard');
                    }
                }
            });

            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                $rootScope.isPageLoading = false;
            });

            $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
                if (error.errors) {
                    /**
                     * This will help in resolve 500 state
                     * without url change
                     */
                    let state = $injector.get('$state');
                    state.go('500');
                    App.alert({ type: 'danger', icon: 'warning', message: error.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
                    return $location.path();
                }
            });

            /* This will logout the admin from the application */
            $rootScope.clearToken = function () {
                localStorageService.remove('token');
                localStorageService.remove('admin');
                delete $rootScope.admin;
                loginSrv.isLogged = false;
                $state.go("login");
            };

            // Set the admin for entire application
            $rootScope.admin = localStorageService.get('admin');

            // If any global error occured
            $rootScope.$on('server_error', function (event, res) {
                if (res.status_code) {
                    if (res.status_code === 401) {
                        $rootScope.clearToken();
                    }
                }
                $rootScope.server_error_message = res.message;
            });

            $rootScope.manageCount = data => {
                if (data) {
                    $rootScope.notificationCount = data.records.count;
                } else {
                    if ($rootScope.notificationCount > 0) {
                        $rootScope.notificationCount -= 1;
                    }
                }
            };

            $rootScope.goToNotificationUrl = data => {
                notificationSvr.markAsRead([data.id]).then(response => {
                    $rootScope.manageCount();
                    $location.path(data.url);
                }).catch(errors => App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' }));
            };
        }]);
        pe.server_error_message = '';
        if (toState.authenticate && !loginSrv.isLogged && !localStorageService.get('admin')) {
            loginSrv.isLogged = false;
>>>>>>> c7eae3b548a8da2c7a76ae39d151a9f95518a98d
            $state.go("login");
            event.preventDefault();
        } else {
            var token = localStorageService.get('token');
            if ($location.path() === '/' && token) {
                $location.path('/dashboard');
            }
        }
    });

<<<<<<< HEAD
=======
    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
        $rootScope.isPageLoading = false;
    });

    $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
        if (error.errors) {
            /**
             * This will help in resolve 500 state
             * without url change
             */
            let state = $injector.get('$state');
            state.go('500');
            App.alert({ type: 'danger', icon: 'warning', message: error.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
            return $location.path();
        }
    });

>>>>>>> c7eae3b548a8da2c7a76ae39d151a9f95518a98d
    /* This will logout the admin from the application */
    $rootScope.clearToken = function () {
        localStorageService.remove('token');
        localStorageService.remove('admin');
        delete $rootScope.admin;
<<<<<<< HEAD
=======
        loginSrv.isLogged = false;
>>>>>>> c7eae3b548a8da2c7a76ae39d151a9f95518a98d
        $state.go("login");
    };

    // Set the admin for entire application
<<<<<<< HEAD
    $rootScope.token = localStorageService.get('token');
=======
    $rootScope.admin = localStorageService.get('admin');

    // If any global error occured
    $rootScope.$on('server_error', function (event, res) {
        if (res.status_code) {
            if (res.status_code === 401) {
                $rootScope.clearToken();
            }
        }
        $rootScope.server_error_message = res.message;
    });

    $rootScope.manageCount = data => {
        if (data) {
            $rootScope.notificationCount = data.records.count;
        } else {
            if ($rootScope.notificationCount > 0) {
                $rootScope.notificationCount -= 1;
            }
        }
    };

    $rootScope.goToNotificationUrl = data => {
        notificationSvr.markAsRead([data.id]).then(response => {
            $rootScope.manageCount();
            $location.path(data.url);
        }).catch(errors => App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' }));
    };
>>>>>>> c7eae3b548a8da2c7a76ae39d151a9f95518a98d
}]);
'use strict';
/* Setup App Main Controller */

myapp.controller('AppController', ['$scope', '$rootScope', function ($scope, $rootScope) {
    $scope.$on('$viewContentLoaded', function () {
        // App.initComponents(); // init core components
        //Layout.init(); //  Init entire layout(header, footer, sidebar, etc) on page load if the partials included in server side instead of loading with ng-include directive 

    });
}]);

/***
Layout Partials.
By default the partials are loaded through AngularJS ng-include directive. In case they loaded in server side(e.g: PHP include function) then below partial 
initialization can be disabled and Layout.init() should be called on page load complete as explained above.
***/

/* Setup Layout Part - Header */
myapp.controller('HeaderController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initHeader(); // init header
    });
}]);

/* Setup Layout Part - Sidebar */
myapp.controller('SidebarController', ['$state', '$scope', function ($state, $scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initSidebar($state); // init sidebar
    });
}]);

/* Setup Layout Part - Quick Sidebar */
myapp.controller('QuickSidebarController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        setTimeout(function () {
            QuickSidebar.init(); // init quick sidebar        
        }, 2000);
    });
}]);

/* Setup Layout Part - Theme Panel */
myapp.controller('ThemePanelController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Demo.init(); // init theme panel
    });
}]);

/* Setup Layout Part - Footer */
myapp.controller('FooterController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initFooter(); // init footer
    });
}]);

/* Init global settings and run the app */
myapp.run(["$rootScope", "settings", "$state", function ($rootScope, settings, $state) {
    $rootScope.$state = $state; // state to be accessed from view
    $rootScope.$settings = settings; // state to be accessed from view
}]);
'use strict';

/* Application routes */

myapp.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
	// the known route
	$urlRouterProvider.when('', '/');

	// For any unmatched url, send to 404
	//$urlRouterProvider.otherwise('/404');

<<<<<<< HEAD

	$stateProvider.state('login', {
=======
	$stateProvider.state('login', {
		url: '/',
		controller: 'loginCtrl',
		templateUrl: '/login/views/login.html',
		authenticate: false,
		data: { pageTitle: 'Login' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/css/admin-login-style.css']
				});
			}]
		}
	}).state('dashboard', {
>>>>>>> c7eae3b548a8da2c7a76ae39d151a9f95518a98d
		url: '/',
		controller: 'loginCtrl',
		templateUrl: '/login/views/login.html',
		authenticate: false,
		data: { pageTitle: 'Login' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/css/admin-login-style.css']
				});
			}]
		}
	}).state('dashboard', {
		url: '/dashboard',
		controller: 'DashboardController',
		templateUrl: '/dashboard/views/dashboard.html',
		data: { pageTitle: 'Dashboard', smallTitle: 'dashboard & statistics' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/morris/morris.css', '/assets/global/plugins/morris/morris.min.js', '/assets/global/plugins/morris/raphael-min.js', '/assets/global/plugins/jquery.sparkline.min.js', '/assets/pages/scripts/dashboard.min.js']
				});
			}]
		},
		authenticate: true
	}).state('404', {
		templateUrl: '/tpl/404.html',
		data: { pageTitle: '404 Page Not Found' },
		authenticate: false,
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before',
					files: ['/assets/pages/css/error.min.css']
				});
			}]
		}
	}).state('500', {
		templateUrl: '/tpl/500.html',
		data: { pageTitle: '500 Internal Server Error' },
		authenticate: false,
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before',
					files: ['/assets/pages/css/error.min.css']
				});
			}]
		}
	}).state('resetpassword', {
		url: '/resetpassword/:key',
		templateUrl: '/resetpassword/views/resetpassword.html',
		data: { pageTitle: 'Reset Password' },
		authenticate: false,
		controller: 'resetPasswordCtrl',
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'myapp',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/css/admin-login-style.css']
				});
			}]
		}
	});
}]);
/***
GLobal Directives
***/

// Route State Load Spinner(used on page or content load)
myapp.directive('ngSpinnerBar', ['$rootScope', '$state', function ($rootScope, $state) {
    return {
        link: function (scope, element, attrs) {
            // by defult hide the spinner bar
            element.addClass('hide'); // hide spinner bar by default

            // display the spinner bar whenever the route changes(the content part started loading)
            $rootScope.$on('$stateChangeStart', function () {
                element.removeClass('hide'); // show spinner bar
            });

            // hide the spinner bar on rounte change success(after the content loaded)
            $rootScope.$on('$stateChangeSuccess', function (event) {
                element.addClass('hide'); // hide spinner bar

                $('body').removeClass('page-on-load'); // remove page loading indicator
                Layout.setAngularJsSidebarMenuActiveLink('match', null, event.currentScope.$state); // activate selected link in the sidebar menu

                // auto scorll to page top
                setTimeout(function () {
                    App.scrollTop(); // scroll to the top on content load
                }, $rootScope.settings.layout.pageAutoScrollOnLoad);
            });

            // handle errors
            $rootScope.$on('$stateNotFound', function () {
                element.addClass('hide'); // hide spinner bar
            });

            // handle errors
            $rootScope.$on('$stateChangeError', function () {
                element.addClass('hide'); // hide spinner bar
            });
        }
    };
}]);

// Handle global LINK click
myapp.directive('a', function () {
    return {
        restrict: 'E',
        link: function (scope, elem, attrs) {
            if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                elem.on('click', function (e) {
                    e.preventDefault(); // prevent link click for above criteria
                });
            }
        }
    };
});

// Handle Dropdown Hover Plugin Integration
myapp.directive('dropdownMenuHover', function () {
    return {
        link: function (scope, elem) {
            elem.dropdownHover();
        }
    };
});
angular.module('myapp').controller('DashboardController', function ($rootScope, $scope, $http, $timeout) {

    $scope.$on('$viewContentLoaded', function () {
        // initialize core components
        App.initAjax();
    });

    // set sidebar closed and body solid layout mode
    $rootScope.settings.layout.pageContentWhite = true;
    $rootScope.settings.layout.pageBodySolid = false;
    $rootScope.settings.layout.pageSidebarClosed = false;
});
'use strict';

<<<<<<< HEAD
myapp.controller('loginCtrl', ["$scope", '$rootScope', '$state', 'loginSrv', 'RestSvr', function ($scope, $rootScope, $state, loginSrv, RestSvr) {

	console.log("loginctrl");
	$scope.submitForm = function () {
		// RestSvr.login('',$scope.user)
		// .then((response)=>{

		// })
		// .catch((error))
		console.log("user", $scope.user);
		loginSrv.setAdmin($scope.user, 'asvffdfs');
		// loginSrv.initAdminSession($scope.user,'asvffdfs')
		console.log(loginSrv.getToken());
=======
mimicTrading.controller('loginCtrl', ['$scope', '$rootScope', '$state', '$http', 'loginSrv', ($scope, $rootScope, $state, $http, loginSrv) => {

	/**
  * login function will authenticate user 
  * and redirect to specific dashboard
  * @param  {Boolean} isValid [Check if form is valid]
  * @return {none}   [User will redirect to dashboard]
  */
	$scope.login = isValid => {
		if (!isValid) {
			return;
		}
		$scope.isLoading = true;
		RestSvr.login('login', $scope.user).then(response => {
			/* loginSrv will initialize user session
    * and store user data into localStorage
    * $rootScope.admin assign a globle variable
    */
			loginSrv.initAdminSession(response.user, response.token);
			$state.go('dashboard');
		}).catch(errors => {
			$scope.message = errors.message;
		}).then(() => {
			$scope.isLoading = false;
		});
	};

	$scope.forgotpassword = () => {
		$scope.isLoading = true;
		let inputjson = { email: $scope.email };
		$http.post('adminapi/forgotpassword', inputjson).then(response => {
			App.alert({ type: 'success', icon: 'success', message: response.data.message, container: $rootScope.settings.errorContainer, place: 'prepend', closeInSeconds: 5 });
			$state.go('login');
		}).catch(({ data }) => {
			const { responsedata } = data;
			App.alert({ type: 'danger', icon: 'warning', message: responsedata.message, container: $rootScope.settings.errorContainer, place: 'prepend', closeInSeconds: 5 });
		}).then(() => {
			$scope.isLoading = false;
		});
>>>>>>> c7eae3b548a8da2c7a76ae39d151a9f95518a98d
	};
}]);
'use strict';

/*this login Srvice will be calles in login controller */

myapp.factory('loginSrv', ['localStorageService', '$rootScope', function (localStorageService, $rootScope) {
	return {
		setAdmin: function (admin, token) {
			localStorageService.set('admin', admin);
			localStorageService.set('token', token);
		},
		updateAdminSession: function (admin, token) {
			$rootScope.admin = localStorageService.get('admin');
		},
		getToken: function () {
			return localStorageService.get('token');
		}
	};
}]);
'use strict';

myapp.factory('appSvr', ['$rootScope', $rootScope => {
	return {
		init: () => {
			// initialize core components
			App.initAjax();
			// set default layout mode
			$rootScope.settings.layout.pageContentWhite = true;
			$rootScope.settings.layout.pageBodySolid = false;
			$rootScope.settings.layout.pageSidebarClosed = false;
		}
	};
}]);
'use strict';
/*
to call all http methods*/

myapp.factory('RestSvr', function ($http, $window, $httpParamSerializerJQLike, $q) {
    let baseUrl = '/admin_api';
    return {
        login: (url, data) => {
            var req = {
                method: POST,
                url: baseUrl + url,
                data: data
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve(response);
                }).catch(function (response) {
                    reject(response);
                });
            });
        },
        get: (url, params) => {
            req = {
                method: 'GET',
                url: baseUrl(apiUrl),
                params: p
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve(response);
                }).catch(function (response) {
                    reject(response);
                });
            });
        },
        post: (url, data) => {
            req = {
                method: 'POST',
                url: baseUrl(apiUrl),
                data: data
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve(response);
                }).catch(function (response) {
                    reject(response);
                });
            });
        },
        delete: (url, params) => {
            req = {
                method: 'DELETE',
                url: baseUrl(apiUrl),
                params: p
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve(response);
                }).catch(function (response) {
                    reject(response);
                });
            });
        },
        put: (url, data) => {
            req = {
                method: 'PUT',
                url: baseUrl(apiUrl),
                data: data
            };
            return $q((resolve, reject) => {
                $http(req).then(function (response) {
                    resolve(response);
                }).catch(function (response) {
                    reject(response);
                });
            });
        }

    };
});
/* Setup global settings */
myapp.factory('settings', ['$rootScope', function ($rootScope) {
    // supported languages
    var settings = {
        layout: {
            pageSidebarClosed: false, // sidebar menu state
            pageContentWhite: true, // set page content layout
            pageBodySolid: false, // solid body color state
            pageAutoScrollOnLoad: 1000 // auto scroll to top on page load

        },
        assetsPath: '../assets',
        globalPath: '../assets/global',
        layoutPath: '../assets/layouts/layout'
    };

    $rootScope.settings = settings;
    return settings;
}]);

/**emptybj h */
mimicTrading.factory('notificationSvr', [function () {
    var notification = {};
    notification.markAsRead = function (data) {
        console.log(data);
    };
    return notification;
}]);
//# sourceMappingURL=../maps/admin.app.min.js.map
